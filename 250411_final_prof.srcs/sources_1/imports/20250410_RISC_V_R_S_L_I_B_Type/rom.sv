`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:15];

    initial begin

/*
        //rom[x] = 32'b func7 _ rs2 _ rs1 _ f3 _ rd _ opcode; // R-Type
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011;  // ADD  x4, x2, x1
        rom[1] = 32'b0100000_00001_00010_000_00101_0110011;  // SUB  x5, x2, x1
        rom[2] = 32'b0000000_00001_00010_110_00110_0110011;  // OR   x6, x2, x1
        rom[3] = 32'b0000000_00001_00010_111_00111_0110011;  // AND  x7, x2, x1
        rom[4] = 32'b0000000_00001_00010_001_01000_0110011;  // SLL  x8, x2, x1
        rom[5] = 32'b0000000_00001_00010_101_01001_0110011;  // SRL  x9, x2, x1
        rom[6] = 32'b0100000_00001_00010_101_01010_0110011;  // SRA  x10, x2, x1
        rom[7] = 32'b0000000_00010_00001_010_01011_0110011;  // SLT  x11, x1, x2
        rom[8] = 32'b0000000_00010_00001_011_01100_0110011;  // SLTU x12, x1, x2
        rom[9] = 32'b0000000_00001_00010_100_01101_0110011;  // XOR  x13, x2, x1
        */


        //rom[x]=32'b imm20              _ rd  _ opcode;    // J-Type
        rom[0] = 32'b00000000010000000000_00010_1101111;    // JAL rd = x2 , imm4
        //rom[x]=32'b imm12       _ rs1 _000_ rd _ opcode;  // JL-Type
        rom[1] = 32'b000000000100_00110_000_00011_1100111;  // JALR rd = 3 rs1 = x6, imm4


        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        //rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        //rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
        //rom[x]=32'b imm7 _ rs2 _ rs1 _ f3 _ imm5 _opcode // S-Type
        //rom[2] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0);
        //rom[x]=32'b imm12      _ rs1 _ f3 _ rd _opcode // L-Type
        //rom[3] = 32'b000000001000_00000_010_00011_0000011; // lw x3 8(x0)

        //rom[x]=32'b imm12      _ rs1 _ f3 _ rd _opcode   // I-Type
        //rom[0] = 32'b000000000100_00010_000_00011_0010011; // ADDI  rd = x3, rs1 = 12, 4(x0)
        //rom[1] = 32'b000000010000_00010_010_00100_0010011; // SLTI  rd = x4, rs1 = 12, 16(x0)
        //rom[2] = 32'b000000000100_00010_011_00101_0010011; // SLTIU rd = x5, rs1 = 12, 4(x0)
        //rom[3] = 32'b000000000100_00010_100_00110_0010011; // XORI  rd = x6, rs1 = 12, 4(x0)
        //rom[4] = 32'b000000000100_00010_110_00111_0010011; // ORI   rd = x7, rs1 = 12, 4(x0)
        //rom[5] = 32'b000000000100_00010_111_01000_0010011; // ANDI  rd = x8, rs1 = 12, 4(x0)

        //rom[x]=32'b fucn7 _ shamt _ rs1 _f3 _ rd  _opcode; // I-Type SLLI
        //rom[6] = 32'b0000000_00001_00110_001_01001_0010011;  // SLLI rx = x9,  rs1 = 16, shamt = 00001
        //rom[7] = 32'b0000000_00001_00110_101_01010_0010011;  // SRLI rx = x10, rs1 = 16, shamt = 00001
        //rom[8] = 32'b0100000_00011_00010_000_01011_0110011;  // SUB  x11, x1, x3
        //rom[9] = 32'b0100000_00001_01011_101_01100_0010011;  // SRAI rx = x12, rs1 = -2, shamt = 00001 


        //rom[6] = 32'b0100000_00001_00000_000_00111_0110011; // sub x7, x0, x1
        //rom[x]=32'b fucn7 _ shamt _ rs1 _f3 _ rd  _opcode; // I-Type SRAI
        //rom[7] = 32'b0100000_00101_00111_101_10010_0010011; // SRAI rx = x18, rs1 = 7, shamt = 10101 



        //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5_ opcode;  // S-Type
        //rom[0] = 32'b0000000_11111_00000_001_01000_0100011;  // sw x2, 8(x0), divide into 15bit & put RAM
        //rom[x]=32'b imm12      _ rs1 _f3 _ rd  _ opcode;   // L-Type
        //rom[1] = 32'b000000001000_00000_000_00011_0000011;   // LB x3, 8(x0); divide into 7bit & put REG
    
    
        //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5_ opcode; // B-Type
        //rom[0] = 32'b0000000_00010_00010_000_00100_1100011; // BEQ  x2, x2, 4 True
        //rom[1] = 32'b0000000_00011_00010_001_01000_1100011; // BNE  x2, x3, 8 True  
        //rom[3] = 32'b0000000_00010_00010_100_00100_1100011; // BLT  x2, x2, 4 False 
        //rom[4] = 32'b0000000_00010_00010_101_01000_1100011; // BGE  x2, x2, 8 True 
        //rom[6] = 32'b0000000_00010_00010_110_01000_1100011; // BLTU x2, x2, 8 False 
        //rom[8] = 32'b0000000_00010_00010_111_00100_1100011; // BGEU x2, x2, 4 True
    

        //rom[x]=32'b imm20              _ rd  _ opcode; // LU-Type
        //rom[0] = 32'b00000000000000000001_00001_0110111; // LUI   x1, imm1
        //rom[x]=32'b imm20              _ rd  _ opcode; // AU-Type
        //rom[1] = 32'b00000000000000000001_00010_0010111; // AUIPC x2, imm1 


        /*
        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
        //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5_ opcode; // B-Type
        rom[2] = 32'b0000000_00010_00010_000_01100_1100011; // beq x2, x2, 12 
        //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5_ opcode; // S-Type
        rom[3] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0);
        //rom[x]=32'b imm12      _ rs1 _f3 _ rd  _ opcode; // L-Type
        rom[4] = 32'b000000001000_00000_010_00011_0000011; // lw x3, 8(x0);
        //rom[x]=32'b imm12      _ rs1 _f3 _ rd  _ opcode; // I-Type
        rom[5] = 32'b000000000001_00000_000_00001_0010011; // addi x1, x0, 1;
        rom[6] = 32'b000000000010_00001_001_00110_0010011; // slli x6, x1, 2;
        */
    end
    assign data = rom[addr[31:2]];
endmodule

